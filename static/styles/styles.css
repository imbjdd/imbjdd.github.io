@import "https://fonts.googleapis.com/css2?family=Crimson+Pro:ital,wght@0,200..900;1,200..900&family=Crimson+Text:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&display=swap";
/*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *, :before, :after, ::backdrop {
      --tw-font-weight: initial;
    }
  }
}

@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    --color-blue-300: oklch(80.9% .105 251.813);
    --color-blue-400: oklch(70.7% .165 254.624);
    --color-blue-600: oklch(54.6% .245 262.881);
    --spacing: .25rem;
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --default-transition-duration: .15s;
    --default-transition-timing-function: cubic-bezier(.4, 0, .2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}

@layer base {
  *, :after, :before, ::backdrop {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  html, :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }

  abbr:where([title]) {
    text-decoration: underline dotted;
  }

  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }

  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }

  b, strong {
    font-weight: bolder;
  }

  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub, sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub {
    bottom: -.25em;
  }

  sup {
    top: -.5em;
  }

  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }

  :-moz-focusring {
    outline: auto;
  }

  progress {
    vertical-align: baseline;
  }

  summary {
    display: list-item;
  }

  ol, ul, menu {
    list-style: none;
  }

  img, svg, video, canvas, audio, iframe, embed, object {
    vertical-align: middle;
    display: block;
  }

  img, video {
    max-width: 100%;
    height: auto;
  }

  button, input, select, optgroup, textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }

  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  ::placeholder {
    opacity: 1;
  }

  @supports (not ((-webkit-appearance: -apple-pay-button))) or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentColor;

      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }

  textarea {
    resize: vertical;
  }

  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }

  ::-webkit-datetime-edit {
    display: inline-flex;
  }

  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }

  ::-webkit-datetime-edit {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-year-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-month-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-day-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-hour-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-minute-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-second-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-millisecond-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }

  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }

  :-moz-ui-invalid {
    box-shadow: none;
  }

  button, input:where([type="button"], [type="reset"], [type="submit"]) {
    appearance: button;
  }

  ::file-selector-button {
    appearance: button;
  }

  ::-webkit-inner-spin-button {
    height: auto;
  }

  ::-webkit-outer-spin-button {
    height: auto;
  }

  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}

@layer components;

@layer utilities {
  .static {
    position: static;
  }

  .prose {
    color: var(--tw-prose-body);
    max-width: 65ch;

    & :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
      margin-bottom: 1.25em;
    }

    & :where([class~="lead"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-lead);
      margin-top: 1.2em;
      margin-bottom: 1.2em;
      font-size: 1.25em;
      line-height: 1.6;
    }

    & :where(a):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-links);
      font-weight: 500;
      text-decoration: underline;
    }

    & :where(strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-bold);
      font-weight: 600;
    }

    & :where(a strong):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(blockquote strong):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(thead th strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
    }

    & :where(ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
      margin-bottom: 1.25em;
      padding-inline-start: 1.625em;
      list-style-type: decimal;
    }

    & :where(ol[type="A"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: upper-alpha;
    }

    & :where(ol[type="a"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: lower-alpha;
    }

    & :where(ol[type="A" s]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: upper-alpha;
    }

    & :where(ol[type="a" s]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: lower-alpha;
    }

    & :where(ol[type="I"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: upper-roman;
    }

    & :where(ol[type="i"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: lower-roman;
    }

    & :where(ol[type="I" s]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: upper-roman;
    }

    & :where(ol[type="i" s]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: lower-roman;
    }

    & :where(ol[type="1"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      list-style-type: decimal;
    }

    & :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
      margin-bottom: 1.25em;
      padding-inline-start: 1.625em;
      list-style-type: disc;
    }

    & :where(ol > li):not(:where([class~="not-prose"], [class~="not-prose"] *))::marker {
      color: var(--tw-prose-counters);
      font-weight: 400;
    }

    & :where(ul > li):not(:where([class~="not-prose"], [class~="not-prose"] *))::marker {
      color: var(--tw-prose-bullets);
    }

    & :where(dt):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      margin-top: 1.25em;
      font-weight: 600;
    }

    & :where(hr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      border-color: var(--tw-prose-hr);
      border-top-width: 1px;
      margin-top: 3em;
      margin-bottom: 3em;
    }

    & :where(blockquote):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-quotes);
      border-inline-start-width: .25rem;
      border-inline-start-color: var(--tw-prose-quote-borders);
      quotes: "“""”""‘""’";
      margin-top: 1.6em;
      margin-bottom: 1.6em;
      padding-inline-start: 1em;
      font-style: italic;
      font-weight: 500;
    }

    & :where(blockquote p:first-of-type):not(:where([class~="not-prose"], [class~="not-prose"] *)):before {
      content: open-quote;
    }

    & :where(blockquote p:last-of-type):not(:where([class~="not-prose"], [class~="not-prose"] *)):after {
      content: close-quote;
    }

    & :where(h1):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      margin-top: 0;
      margin-bottom: .888889em;
      font-size: 2.25em;
      font-weight: 800;
      line-height: 1.11111;
    }

    & :where(h1 strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-weight: 900;
    }

    & :where(h2):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      margin-top: 2em;
      margin-bottom: 1em;
      font-size: 1.5em;
      font-weight: 700;
      line-height: 1.33333;
    }

    & :where(h2 strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-weight: 800;
    }

    & :where(h3):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      margin-top: 1.6em;
      margin-bottom: .6em;
      font-size: 1.25em;
      font-weight: 600;
      line-height: 1.6;
    }

    & :where(h3 strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-weight: 700;
    }

    & :where(h4):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      margin-top: 1.5em;
      margin-bottom: .5em;
      font-weight: 600;
      line-height: 1.5;
    }

    & :where(h4 strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-weight: 700;
    }

    & :where(img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 2em;
      margin-bottom: 2em;
    }

    & :where(picture):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 2em;
      margin-bottom: 2em;
      display: block;
    }

    & :where(video):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 2em;
      margin-bottom: 2em;
    }

    & :where(kbd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-kbd);
      box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
      padding-top: .1875em;
      padding-inline-end: .375em;
      padding-bottom: .1875em;
      border-radius: .3125rem;
      padding-inline-start: .375em;
      font-family: inherit;
      font-size: .875em;
      font-weight: 500;
    }

    & :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-code);
      font-size: .875em;
      font-weight: 600;
    }

    & :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)):before, & :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)):after {
      content: "`";
    }

    & :where(a code):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h1 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
    }

    & :where(h2 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-size: .875em;
    }

    & :where(h3 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
      font-size: .9em;
    }

    & :where(h4 code):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(blockquote code):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(thead th code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: inherit;
    }

    & :where(pre):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-pre-code);
      background-color: var(--tw-prose-pre-bg);
      padding-top: .857143em;
      padding-inline-end: 1.14286em;
      padding-bottom: .857143em;
      border-radius: .375rem;
      margin-top: 1.71429em;
      margin-bottom: 1.71429em;
      padding-inline-start: 1.14286em;
      font-size: .875em;
      font-weight: 400;
      line-height: 1.71429;
      overflow-x: auto;
    }

    & :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      font-weight: inherit;
      color: inherit;
      font-size: inherit;
      font-family: inherit;
      line-height: inherit;
      background-color: #0000;
      border-width: 0;
      border-radius: 0;
      padding: 0;
    }

    & :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)):before, & :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)):after {
      content: none;
    }

    & :where(table):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      table-layout: auto;
      width: 100%;
      margin-top: 2em;
      margin-bottom: 2em;
      font-size: .875em;
      line-height: 1.71429;
    }

    & :where(thead):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      border-bottom-width: 1px;
      border-bottom-color: var(--tw-prose-th-borders);
    }

    & :where(thead th):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-headings);
      vertical-align: bottom;
      padding-inline-end: .571429em;
      padding-bottom: .571429em;
      padding-inline-start: .571429em;
      font-weight: 600;
    }

    & :where(tbody tr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      border-bottom-width: 1px;
      border-bottom-color: var(--tw-prose-td-borders);
    }

    & :where(tbody tr:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      border-bottom-width: 0;
    }

    & :where(tbody td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      vertical-align: baseline;
    }

    & :where(tfoot):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      border-top-width: 1px;
      border-top-color: var(--tw-prose-th-borders);
    }

    & :where(tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      vertical-align: top;
    }

    & :where(th, td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      text-align: start;
    }

    & :where(figure > *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 0;
      margin-bottom: 0;
    }

    & :where(figcaption):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      color: var(--tw-prose-captions);
      margin-top: .857143em;
      font-size: .875em;
      line-height: 1.42857;
    }

    --tw-prose-body: oklch(37.3% .034 259.733);
    --tw-prose-headings: oklch(21% .034 264.665);
    --tw-prose-lead: oklch(44.6% .03 256.802);
    --tw-prose-links: oklch(21% .034 264.665);
    --tw-prose-bold: oklch(21% .034 264.665);
    --tw-prose-counters: oklch(55.1% .027 264.364);
    --tw-prose-bullets: oklch(87.2% .01 258.338);
    --tw-prose-hr: oklch(92.8% .006 264.531);
    --tw-prose-quotes: oklch(21% .034 264.665);
    --tw-prose-quote-borders: oklch(92.8% .006 264.531);
    --tw-prose-captions: oklch(55.1% .027 264.364);
    --tw-prose-kbd: oklch(21% .034 264.665);
    --tw-prose-kbd-shadows: NaN NaN NaN;
    --tw-prose-code: oklch(21% .034 264.665);
    --tw-prose-pre-code: oklch(92.8% .006 264.531);
    --tw-prose-pre-bg: oklch(27.8% .033 256.848);
    --tw-prose-th-borders: oklch(87.2% .01 258.338);
    --tw-prose-td-borders: oklch(92.8% .006 264.531);
    --tw-prose-invert-body: oklch(87.2% .01 258.338);
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: oklch(70.7% .022 261.325);
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: oklch(70.7% .022 261.325);
    --tw-prose-invert-bullets: oklch(44.6% .03 256.802);
    --tw-prose-invert-hr: oklch(37.3% .034 259.733);
    --tw-prose-invert-quotes: oklch(96.7% .003 264.542);
    --tw-prose-invert-quote-borders: oklch(37.3% .034 259.733);
    --tw-prose-invert-captions: oklch(70.7% .022 261.325);
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: oklch(87.2% .01 258.338);
    --tw-prose-invert-pre-bg: #00000080;
    --tw-prose-invert-th-borders: oklch(44.6% .03 256.802);
    --tw-prose-invert-td-borders: oklch(37.3% .034 259.733);
    font-size: 1rem;
    line-height: 1.75;

    & :where(picture > img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 0;
      margin-bottom: 0;
    }

    & :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: .5em;
      margin-bottom: .5em;
    }

    & :where(ol > li):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(ul > li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-inline-start: .375em;
    }

    & :where(.prose > ul > li p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: .75em;
      margin-bottom: .75em;
    }

    & :where(.prose > ul > li > p:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
    }

    & :where(.prose > ul > li > p:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-bottom: 1.25em;
    }

    & :where(.prose > ol > li > p:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
    }

    & :where(.prose > ol > li > p:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-bottom: 1.25em;
    }

    & :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: .75em;
      margin-bottom: .75em;
    }

    & :where(dl):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 1.25em;
      margin-bottom: 1.25em;
    }

    & :where(dd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: .5em;
      padding-inline-start: 1.625em;
    }

    & :where(hr + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h2 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h3 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h4 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 0;
    }

    & :where(thead th:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-inline-start: 0;
    }

    & :where(thead th:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-inline-end: 0;
    }

    & :where(tbody td, tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-top: .571429em;
      padding-inline-end: .571429em;
      padding-bottom: .571429em;
      padding-inline-start: .571429em;
    }

    & :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-inline-start: 0;
    }

    & :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      padding-inline-end: 0;
    }

    & :where(figure):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 2em;
      margin-bottom: 2em;
    }

    & :where(.prose > :first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-top: 0;
    }

    & :where(.prose > :last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
      margin-bottom: 0;
    }
  }

  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }

  .block {
    display: block;
  }

  .flex {
    display: flex;
  }

  .grid {
    display: grid;
  }

  .w-full {
    width: 100%;
  }

  .max-w-full {
    max-width: 100%;
  }

  .min-w-0 {
    min-width: calc(var(--spacing) * 0);
  }

  .flex-shrink-0 {
    flex-shrink: 0;
  }

  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  .flex-col {
    flex-direction: column;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  .justify-center {
    justify-content: center;
  }

  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }

  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }

  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }

  .gap-12 {
    gap: calc(var(--spacing) * 12);
  }

  .gap-16 {
    gap: calc(var(--spacing) * 16);
  }

  .truncate {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }

  .overflow-hidden {
    overflow: hidden;
  }

  .overflow-x-hidden {
    overflow-x: hidden;
  }

  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }

  .py-20 {
    padding-block: calc(var(--spacing) * 20);
  }

  .pt-20 {
    padding-top: calc(var(--spacing) * 20);
  }

  .pb-16 {
    padding-bottom: calc(var(--spacing) * 16);
  }

  .pb-20 {
    padding-bottom: calc(var(--spacing) * 20);
  }

  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }

  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }

  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }

  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }

  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }

  .break-words {
    overflow-wrap: break-word;
  }

  .text-blue-400 {
    color: var(--color-blue-400);
  }

  .italic {
    font-style: italic;
  }

  .hover\:text-blue-300 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-blue-300);
      }
    }
  }

  .sm\:grid-cols-2 {
    @media (width >= 40rem) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }

  .sm\:px-8 {
    @media (width >= 40rem) {
      padding-inline: calc(var(--spacing) * 8);
    }
  }

  .md\:grid-cols-3 {
    @media (width >= 48rem) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }

  .md\:px-16 {
    @media (width >= 48rem) {
      padding-inline: calc(var(--spacing) * 16);
    }
  }

  .lg\:prose-xl {
    @media (width >= 64rem) {
      font-size: 1.25rem;
      line-height: 1.8;

      & :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
        margin-bottom: 1.2em;
      }

      & :where([class~="lead"]):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1em;
        margin-bottom: 1em;
        font-size: 1.2em;
        line-height: 1.5;
      }

      & :where(blockquote):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.6em;
        margin-bottom: 1.6em;
        padding-inline-start: 1.06667em;
      }

      & :where(h1):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 0;
        margin-bottom: .857143em;
        font-size: 2.8em;
        line-height: 1;
      }

      & :where(h2):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.55556em;
        margin-bottom: .888889em;
        font-size: 1.8em;
        line-height: 1.11111;
      }

      & :where(h3):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.6em;
        margin-bottom: .666667em;
        font-size: 1.5em;
        line-height: 1.33333;
      }

      & :where(h4):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.8em;
        margin-bottom: .6em;
        line-height: 1.6;
      }

      & :where(img):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(picture):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 2em;
        margin-bottom: 2em;
      }

      & :where(picture > img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 0;
        margin-bottom: 0;
      }

      & :where(video):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 2em;
        margin-bottom: 2em;
      }

      & :where(kbd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-top: .25em;
        padding-inline-end: .4em;
        padding-bottom: .25em;
        border-radius: .3125rem;
        padding-inline-start: .4em;
        font-size: .9em;
      }

      & :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        font-size: .9em;
      }

      & :where(h2 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        font-size: .861111em;
      }

      & :where(h3 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        font-size: .9em;
      }

      & :where(pre):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-top: 1.11111em;
        padding-inline-end: 1.33333em;
        padding-bottom: 1.11111em;
        border-radius: .5rem;
        margin-top: 2em;
        margin-bottom: 2em;
        padding-inline-start: 1.33333em;
        font-size: .9em;
        line-height: 1.77778;
      }

      & :where(ol):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
        margin-bottom: 1.2em;
        padding-inline-start: 1.6em;
      }

      & :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: .6em;
        margin-bottom: .6em;
      }

      & :where(ol > li):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(ul > li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-start: .4em;
      }

      & :where(.lg\:prose-xl > ul > li p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: .8em;
        margin-bottom: .8em;
      }

      & :where(.lg\:prose-xl > ul > li > p:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
      }

      & :where(.lg\:prose-xl > ul > li > p:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-bottom: 1.2em;
      }

      & :where(.lg\:prose-xl > ol > li > p:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
      }

      & :where(.lg\:prose-xl > ol > li > p:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-bottom: 1.2em;
      }

      & :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: .8em;
        margin-bottom: .8em;
      }

      & :where(dl):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
        margin-bottom: 1.2em;
      }

      & :where(dt):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1.2em;
      }

      & :where(dd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: .6em;
        padding-inline-start: 1.6em;
      }

      & :where(hr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 2.8em;
        margin-bottom: 2.8em;
      }

      & :where(hr + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h2 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h3 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)), & :where(h4 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 0;
      }

      & :where(table):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        font-size: .9em;
        line-height: 1.55556;
      }

      & :where(thead th):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-end: .666667em;
        padding-bottom: .888889em;
        padding-inline-start: .666667em;
      }

      & :where(thead th:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-start: 0;
      }

      & :where(thead th:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-end: 0;
      }

      & :where(tbody td, tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-top: .888889em;
        padding-inline-end: .666667em;
        padding-bottom: .888889em;
        padding-inline-start: .666667em;
      }

      & :where(tbody td:first-child, tfoot td:first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-start: 0;
      }

      & :where(tbody td:last-child, tfoot td:last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        padding-inline-end: 0;
      }

      & :where(figure):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 2em;
        margin-bottom: 2em;
      }

      & :where(figure > *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 0;
        margin-bottom: 0;
      }

      & :where(figcaption):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 1em;
        font-size: .9em;
        line-height: 1.55556;
      }

      & :where(.lg\:prose-xl > :first-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-top: 0;
      }

      & :where(.lg\:prose-xl > :last-child):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
        margin-bottom: 0;
      }
    }
  }

  .lg\:grid-cols-1 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }

  .lg\:grid-cols-4 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
  }

  .lg\:grid-cols-6 {
    @media (width >= 64rem) {
      grid-template-columns: repeat(6, minmax(0, 1fr));
    }
  }

  .lg\:flex-row {
    @media (width >= 64rem) {
      flex-direction: row;
    }
  }

  .lg\:px-24 {
    @media (width >= 64rem) {
      padding-inline: calc(var(--spacing) * 24);
    }
  }

  .xl\:gap-24 {
    @media (width >= 80rem) {
      gap: calc(var(--spacing) * 24);
    }
  }

  .xl\:px-48 {
    @media (width >= 80rem) {
      padding-inline: calc(var(--spacing) * 48);
    }
  }

  .\32 xl\:px-96 {
    @media (width >= 96rem) {
      padding-inline: calc(var(--spacing) * 96);
    }
  }
}

h1, h2, h3, h4, h5, h6 {
  color: #000;
  font-family: Crimson Text, serif;
}

p, li, blockquote, cite, strong, em, code, kbd, samp, pre, small, a {
  font-family: Crimson Pro, serif;
}

a {
  color: #0a4a55;
  text-underline-offset: 4px;
  width: fit-content;
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
  transition-duration: var(--tw-duration, var(--default-transition-duration));
  text-decoration-line: underline;

  &:hover {
    @media (hover: hover) {
      color: var(--color-blue-600);
    }
  }
}

@property --tw-font-weight {
  syntax: "*";
  inherits: false
}
